# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # push:
  #   branches:
  #     - "main"
  workflow_dispatch:
    inputs:
      openSourceRepo:
        description: 'The open source workflow repository as {owner}/{repo} (ex: github/codeql-action)'
        required: true
        default: 'microsoft/setup-msbuild'
      workflowTargetGhesUrl:
        description: 'URL of target workflow repository in GHES(ex: https://ghes.dev/targetGroup/targetRepo)'
        required: true
        default: 'https://ghes.dev/targetGroup/targetRepo'
      tagVersion:
        description: 'Branch name/version (if not default branch)'
        required: false
        default: 'v1.1'
      workflowRunNumber:
        description: 'Workflow'
        required: false
        default: '1'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: View context attributes
        uses: actions/github-script@v5
        with:
          script: console.log(context)

      # # Runs a set of commands using the runners shell
      # - name: Submit issue
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       const repoArray = context.payload.repository.full_name.split('/')
      #       const owner = repoArray[0]
      #       const repo = repoArray[1]
      #       github.rest.issues.create({
      #         owner: owner,
      #         repo: repo,
      #         title: 'Test issue',
      #       });

  checkout-and-push-repo:
    runs-on: ubuntu-latest
    needs: build
    env:
      CLONE_DIR: $(mktemp -d)
    steps:
      - name: Set Clone CLONE_DIR
        run: echo "CLONE_DIR=$(mktemp -d)" >> $GITHUB_ENV
      - name: Checkout repo
        run: | 
          # if version is not null, clone with version
          if [[ -n "${{ github.event.inputs.tagVersion }}" ]]; then
            TAG="--branch ${{ github.event.inputs.tagVersion }}"
          fi
          git clone $TAG https://github.com/${{ github.event.inputs.openSourceRepo }} "$CLONE_DIR"

      - name: Push repo
        run: |
          IFS='/' read -ra STRARR <<< "${{ github.event.inputs.openSourceRepo }}"
          SOURCE_REPO_URL="https://github.com/${{ github.event.inputs.openSourceRepo }}"
          NEW_REPO_NAME="${STRARR[1]}-${{ github.event.inputs.tagVersion }}"
          NEW_REPO_URL='https://'${GITHUB_USERNAME}':'${GITHUB_TOKEN}'@github.com/"${STRARR[0]}"/"$NEW_REPO_NAME".git'
          echo "GitHub username: $GITHUB_USERNAME"
          echo "GitHub password: $GITHUB_PASSWORD"
          cd "$CLONE_DIR"
          git clone --bare "$SOURCE_REPO_URL" 
          gh repo create "$NEW_REPO_NAME"
          git remote set-url origin "${new_repo_url}"
          git push --mirror origin
          rm -rf $CLONE_DIR
          # gh repo create test-amex-pipeline-23 --source=. --push --private
          # git remote add new-origin ${{ secrets.DEMO_USERNAME}}:${{ secrets.DEMO_PAT}}@github.com:${{ github.repository_owner}}/"${STRARR[1]}"-"${{ github.event.inputs.tagVersion }}".git
          # git remote rm origin
          # git remote rename new-origin origin
          # git push --all origin

