# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # push:
  #   branches:
  #     - "main"
  workflow_dispatch:
    inputs:
      openSourceRepo:
        description: 'The open source workflow repository as {owner}/{repo} (ex: github/codeql-action)'
        required: true
        default: 'microsoft/setup-msbuild'
      workflowTargetGhesUrl:
        description: 'URL of target workflow repository in GHES(ex: https://ghes.dev/targetGroup/targetRepo)'
        required: true
        default: 'https://ghes.dev/targetGroup/targetRepo'
      tagVersion:
        description: 'Branch name/version (if not default branch)'
        required: false
        default: 'v1.1'
      workflowRunNumber:
        description: 'Workflow run number'
        required: false
        default: '1'
      uploadOrg:
        description: 'The organization to upload the org to.'
        required: true
        default: 'pmartindev'

permissions: write-all
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: View context attributes
        uses: actions/github-script@v5
        with:
          script: console.log(context)
      - name: Get Repo Values
        id: get-repo-values
        run: |
          IFS='/' read -ra STRARR <<< "${{ github.event.inputs.openSourceRepo }}"
          # echo "SOURCE_REPO_NAME=${STRARR[1]}" >> $GITHUB_ENV
          echo "::set-output name=source_repo_name::${STRARR[1]}"
    outputs:
      source_repo_var: ${{ steps.get-repo-values.outputs.source_repo_name }}
  
  checkout-and-push-repo:
    runs-on: ubuntu-latest
    needs: build
    env:
      CLONE_DIR: $(mktemp -d)
    steps:
      - name: Set Clone CLONE_DIR
        run: echo "CLONE_DIR=$(mktemp -d)" >> $GITHUB_ENV
      - name: Checkout repo
        run: | 
          # if version is not null, clone with version
          if [[ -n "${{ github.event.inputs.tagVersion }}" ]]; then
            TAG="--branch ${{ github.event.inputs.tagVersion }}"
          fi
          git clone $TAG https://github.com/${{ github.event.inputs.openSourceRepo }} "$CLONE_DIR"
      - name: Scan action.yml for using
        id: scan-action-yml
        run: |
          if [[ -f "$CLONE_DIR/action.yml" ]]; then
            echo "::set-output name=using::$(cat "$CLONE_DIR/action.yml" | grep -o 'using:.*' | cut -d ':' -f 2 | tr -d ' ' | tr -d "\'")"
            # echo "USING=$(cat $CLONE_DIR/action.yml | grep -o 'using:.*' | cut -d ':' -f 2)" >> $GITHUB_ENV
          elif [[ -f "$CLONE_DIR/action.yaml" ]]; then
            echo "::set-output name=using::$(cat "$CLONE_DIR/action.yaml" | grep -o 'using:.*' | cut -d ':' -f 2 | tr -d ' ')"
            # echo "USING=$(cat $CLONE_DIR/action.yaml | grep -o 'using:.*' | cut -d ':' -f 2)" >> $GITHUB_ENV
          fi
      - name: Push repo
        env:
          USER_TOKEN: ${{ secrets.DEMO_USER }}
          USER_PAT: ${{ secrets.DEMO_PAT }}
        run: |
          IFS='/' read -ra STRARR <<< "${{ github.event.inputs.openSourceRepo }}"
          SOURCE_REPO_URL="https://github.com/${{ github.event.inputs.openSourceRepo }}"
          NEW_REPO_NAME="${STRARR[1]}-${{ github.event.inputs.tagVersion }}-${{ github.event.inputs.workflowRunNumber }}"
          NEW_REPO_URL="https://$USER_TOKEN:$USER_PAT@github.com/${{ github.event.inputs.uploadOrg }}/$NEW_REPO_NAME"
          cd "$CLONE_DIR"
          git clone --bare "$SOURCE_REPO_URL" "$NEW_REPO_NAME"
          echo "new_repo_url: $NEW_REPO_URL"
          git remote set-url origin "$NEW_REPO_URL"
          echo "Authenticating"
          echo "$USER_PAT" > .githubtoken
          gh auth login --with-token < .githubtoken
          echo "creating repo"
          gh repo create --private $NEW_REPO_NAME
          git push --mirror origin
          rm -rf $CLONE_DIR
    outputs:
      using_var: ${{ steps.scan-action-yml.outputs.using }}

  submit-issue:
    runs-on: ubuntu-latest
    needs: [build, checkout-and-push-repo]
    steps:
      - name: Submit issue
        uses: actions/github-script@v6
        with:
          script: |
            const repoArray = context.payload.repository.full_name.split('/')
            const owner = repoArray[0]
            const repo = repoArray[1]
            const body = `[View workflow run for details](${context.payload.repository.html_url}/actions/runs/${context.runId})`` + '\n' + `CSVArtifactURL:[https://github.com/githubcustomers/AMEX-Actions-Scanning/suites/5351388886/artifacts/167463752]` + '\n' + `SarifArtifactURL:[https://github.com/githubcustomers/AMEX-Actions-Scanning/suites/5512449082/artifacts/176642436]` + '\n' + 'Critical:[]' + '\n' + 'High:[]' + '\n' + 'Medium:[]' + '\n' + 'Low:[]'
            github.rest.issues.create({
              owner: owner,
              repo: repo,
              body = body,
              title: '${{ needs.build.outputs.source_repo_var}}-${{ github.event.inputs.tagVersion }}-${{ github.event.inputs.workflowRunNumber }}',
              labels: ['using:${{ needs.checkout-and-push-repo.outputs.using_var }}', 'results:Pass']
            });